from typing import List, Union, Optional
import numpy as np
from sentence_transformers import SentenceTransformer

class TextVectorizer:
    """Handles the vectorization of text chunks using sentence-transformers."""

    def __init__(self, model_name: str = 'all-MiniLM-L6-v2'):
        """
        Initializes the TextVectorizer.

        Args:
            model_name: The name of the sentence-transformer model to use.
                        Refer to https://www.sbert.net/docs/pretrained_models.html for options.
        """
        try:
            self.model = SentenceTransformer(model_name)
            # You can get the embedding dimension if needed, e.g., for vector DB setup
            # self.embedding_dim = self.model.get_sentence_embedding_dimension()
            # print(f"Initialized SentenceTransformer model: {model_name}, Embedding dimension: {self.embedding_dim}")
            print(f"Initialized SentenceTransformer model: {model_name}")
        except Exception as e:
            print(f"Error initializing SentenceTransformer model '{model_name}': {e}")
            print("Please ensure the model name is correct and you have an internet connection for the first download.")
            print("You might need to install sentence-transformers: pip install sentence-transformers")
            self.model = None # Or raise the exception

    def vectorize(self, texts: Union[str, List[str]]) -> Optional[np.ndarray]:
        """
        Converts a single text or a list of texts into numerical vectors (embeddings).

        Args:
            texts: A single string or a list of strings to vectorize.

        Returns:
            A numpy array удовольствий embeddings, or None if model initialization failed.
            If a single string is input, a 2D array with one row is returned.
            If a list of strings is input, a 2D array with multiple rows is returned.
        """
        if self.model is None:
            print("Vectorizer model not initialized. Cannot vectorize text.")
            return None
        
        if not texts:
            return np.array([])

        try:
            # The encode method can handle both a single sentence and a list of sentences.
            embeddings = self.model.encode(texts, convert_to_numpy=True, show_progress_bar=False)
            # Ensure output is always 2D, even for a single input string
            return embeddings if isinstance(texts, list) else embeddings.reshape(1, -1)
        except Exception as e:
            print(f"Error during text vectorization: {e}")
            return None

    def get_embedding_dimension(self) -> Optional[int]:
        """Returns the dimension of the embeddings generated by the model."""
        if self.model:
            return self.model.get_sentence_embedding_dimension()
        return None

# Example Usage:
if __name__ == '__main__':
    # This example assumes you have an internet connection to download the model if it's the first time.
    vectorizer = TextVectorizer(model_name='all-MiniLM-L6-v2') # A common, good quality model

    if vectorizer.model:
        print(f"Embedding dimension: {vectorizer.get_embedding_dimension()}")
        
        sample_texts = [
            "This is the first document chunk.",
            "Another piece of text for vectorization.",
            "智能问答助手需要将文本转换为向量。"
        ]
        
        vectors = vectorizer.vectorize(sample_texts)
        
        if vectors is not None:
            print(f"\nGenerated {vectors.shape[0]} vectors with dimension {vectors.shape[1]}:")
            for i, (text, vec) in enumerate(zip(sample_texts, vectors)):
                print(f"Text: {text}")
                # print(f"Vector (first 5 dims): {vec[:5]}...") # Print first few dimensions
                print(f"Vector norm: {np.linalg.norm(vec)}") # Example: print vector norm
        
        single_text = "这是一个单独的句子。"
        single_vector = vectorizer.vectorize(single_text)
        if single_vector is not None:
            print(f"\nVector for single text '{single_text}':\nShape: {single_vector.shape}")
            # print(f"Vector (first 5 dims): {single_vector[0, :5]}...")

        empty_texts = []
        empty_vectors = vectorizer.vectorize(empty_texts)
        if empty_vectors is not None:
            print(f"\nVectors for empty list: {empty_vectors}, shape: {empty_vectors.shape}")

    else:
        print("Vectorizer could not be initialized. Example usage cannot proceed.")